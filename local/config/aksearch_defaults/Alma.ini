[API]
; Your Alma API url and key
url = https://ALMA-URL/almaws/v1/
key = MY_ALMA_APY_KEY


[FulfillmentUnits]
; Which fulfillment unit has which locations? Take the code from
; Alma Menu -> Filfillment Config. Menu -> Fulfillment Units -> [Code = FULFILLMENT_UNIT_CODE] -> Fulfillment Unit Locations -> [Code = LOCATION_CODE]
; Format: FULFILLMENT_UNIT_CODE[] = LOCATION_CODE
; Example:
;	General[] = main
;	General[] = music
;	Limited[] = microforms
;	Limited[] = reference
;	Closed[] = RARE
;	Closed[] = SCILOWER


[DefaultPolicies]
; The default policies for the fulfilment units. This information is shown to the user if no item exception policy is used.
; Format: FULFILLMENT_UNIT_CODE = OWN_DESCRITPION_OF_POLICY
; Example:
;	General = "Loan 14 days"
;	Limited = "Limited use"
;	Short Loan = "3 day short loan"


[Requestable]
; This is used to find out for which combination of user group and fulfillment unit (see above) the request button should be shown in the item list 
; (who can request what). Define every combination of fulfillment unit and user group here and assign "N" for "No, not requestable"
; or "Y" for "Yes, is requestable".
; Format: FULFILLMENT_UNIT_CODE[USER_GROUP_CODE] = N or Y
; Example:
;	General[STUDENT] = Y
;	General[FACULTY] = Y
;	General[STAFF] = N
;	Limited[STUDENT] = N
;	Limited[FACULTY] = N
;	Limited[STAFF] = N
;	Short Loan[STUDENT] = Y
;	Short Loan[FACULTY] = Y
;	Short Loan[STAFF] = N


[Holds]
; HMACKeys - A list of hold form element names that will be analyzed for consistency
; during hold form processing. Most users should not need to change this setting.
HMACKeys = id:holding_id:item_id

; defaultRequiredDate - A colon-separated list used to set the default "not required
; after" date for holds in the format days:months:years
; e.g. 0:1:0 will set a "not required after" date of 1 month from the current date
; You may prefix this string with "driver:" to attempt to load a default date from
; the ILS based on internal rules instead of calculating one in VuFind; if the ILS
; calls, the relative rules will still be used (e.g. "driver:0:1:0")
defaultRequiredDate = 14:0:0

; extraHoldFields - A colon-separated list used to display extra visible fields in the
; place holds form. Supported values are "comments", "requiredByDate" and
; "pickUpLocation"
extraHoldFields = comments:requiredByDate:pickUpLocation

; A Pick Up Location Code used to pre-select the pick up location drop down list and
; provide a default option if others are not available. Must correspond with one of 
; the Location IDs returned by getPickUpLocations()
; We have to set this for a correct request handling.
defaultPickUpLocation = MAIN

; Set to "true " if title level holds should be used. If "false", item level holds
; will be used. Default is "false".
;titleLevelHolds = true

;[PickupLocations]
; THIS IS FOR FUTURE USE. DO NOT USE YET, IT'S NOT WORKING!!! WE USE defaultPickUpLocation FROM ABOVE!
; Define pickup locations per library here. The user can choose in a drop down field where he want's to pickup the requested book
; if there are two or more pickup locations for a library. If you only have one pickup location, you can leave this empty.
; Format: LIBRARY_CODE[] = PICKUP_LOCATION	


[Authentication]
; Alma does not save user passwords, so we cannot use ILS authentication. We have to use an external system (LDAP, Shibboleth, ...)
; or we could use the VuFind Database. If this setting is true, the passwords of the users will be saved in the VuFind Database.
; ATTENTION: You also have to activate "Database" method in config.ini in section [Authentication] for this to work!
; REMEMBER: The user will register himself through a "Create new account" form that creates an account in VuFind and in Alma. This
;           form will also generate a user id that will be used as login name.
useVuFindDatabase = false


[Webhook]
; This is the secret you have to use in the webhook integration profile in Alma.
secret = MY_WEBHOOK_SECRET

; Select a prefix for the barcode generated for new users that are created by webhook. Leave empty if you don't want a prefix.
; Example:
;	barcodePrefix = LIB_
; This example would generate barcodes like LIB_45A2B3
barcodePrefix = 

; Select the length of the barcode (without prefix). Maximum you can set is 32. Default value if not set is 10.
; Example:
;	barcodeLength = 7
; With barcodePrefix set to LIB_, this example would generate barcodes like LIB_1234567
barcodeLength = 6

; Set the code and description of the user identifyer type that stands for the barcode in Alma.
; Example:
;	barcodeIdTypeCode = 02
;	barcodeIdTypeDesc = Barcode

; When a new user is created via the Alma webhook, a one-time-password is created. VuFind sends this to the user so that he is able to
; log in one time and set his personal password. Here you can set the "from" eMail address from which the eMail should be sent.
; Example:
;	emailFrom = "office@institution.org"

; You can also set a BCC eMail address. This could be useful for controlling the successful sending of the message.
; Example:
;	emailBCC = "my_email@institution.org"


[Users]
; The code of the user group that should be used when a new user registers with the "create new user" form.
; It has to be one of the users in Alma at "Fulfillment Configuration" -> "Patron Groups". Use the Code, not
; the description!
; Example:
;	newUserGroup = DEFAULT_USER_GROUP_CODE

; Set some other values that Alma needs for creating new users. See also Alma user object at:
; https://developers.exlibrisgroup.com/alma/apis/xsd/rest_user.xsd?tags=POST
newUserRecordType = PUBLIC
newUserAccountType = INTERNAL
newUserStatus = ACTIVE
newUserJobCategory = Patron
newUserEmailType = personal
newUserAddressType = home
newUserPhoneType = home

; Set the jobs from which the user can choose in the "create new user" form. The values on the right side can be translated in
; the language files.
; Example:
;	jobs[] = employee
;	jobs[] = student
;	jobs[] = other

; Set the required fields in the "create new user" form.
; Possible values are: salutation, firstName, lastName, street, zip, city, email, phone, birthday, job, password, passwordConfirm,
;					   residenceRegistrationCard, dataProcessing, loanHistory, houseAndUsageRules, captchaCode
; Example:
;	newUserRequired[] = firstName
;	newUserRequired[] = lastName	
;	newUserRequired[] = email

; When a new user registers through the "create account" form, VuFind sends one eMail to the user and one eMail as notification to
; the library. Here you can set the "from" eMail address from which the eMails should be sent.
; Example:
;	emailFrom = "office@institution.org"

; When a new user registers through the "create account" form, VuFind sends one eMail to the user and one eMail as notification to
; the library. Here you can set the "reply to" eMail address, which is used when the user clicks on the "reply" button of his eMail
; software. This gives you the possibility to have different "from" and "reply to" addresses.
; Example:
;	emailReplyTo = "service@institution.org"

; When a new user registers through the "create account" form, VuFind sends one eMail to the user and one eMail as notification to
; the library. Here you can define an additional eMail-Address as BCC to which the eMail should be sent.
; Example:
;	emailBcc = "bcc.address@institution.org"

; When a new user registers through the "create account" form, VuFind sends a notification eMail not only to the user, but also to
; the library. Here you can set the eMail address of the library, to which this eMail should be sent.
; Example:
;	emailLibrary = "library@institution.org"

; Here you can set a special eMail text one or more jobs that are defined above with the "jobs[]" config. This could be interresting if you
; want to send an extra message to a certain group of users.
; You can set the special text in the language files with the key "eMailToUserSpecialText".
; Example:
;	jobsSpecialEmailText[] = student
;	jobsSpecialEmailText[] = employee

; Set the expiry date of the new user account here. You can set the scope (D = days, M = months, Y = years) and the time you want to add
; from now. If not set, the default for scope is Y and for add 1, so it will add 1 year to now.
; Example: The user registers and his account should expire in 1 year and 6 month (= 18 month in total) from now on:
;	expiryDate[scope] = M
;	expiryDate[add] = 18

; Switch on or off a form field for sending a file with the notification eMail to the library (see "emailLibrary" above).
; Possible values are "true" and "false".
residenceRegistrationCardSending = false

; Activate or deactivate the blocking of a user when he newly registers.
; Possible values are "true" and "false".
blockUser = false

; Set the block settings (only used when "blockUser" setting above is set to "true")
; For possible values, log in to ExLibris developers network with your institutional account
; and go to page https://developers.exlibrisgroup.com/alma/apis/xsd/rest_user.xsd?tags=POST#user_block
blockTypeCode = 
blockTypeDesc = 
blockDescriptionCode = 
blockDescriptionDesc = 
blockStatus = 
blockNote = 
blockCreatedBy = 

; THIS IS NOT IN USE YET!
; Here you can set a special expiry date for one or more jobs that are defined above with the "jobs[]" config. You could use this if e. g.
; an employee should have another expiry date as a student.
; Example: The employee gets another expiry date (3 years from now). All other jobs get the default expiry date (see above).
;	jobsSpecialExpiryDate[] = employee
;	jobsSpecialExpiryDate[scope] = Y
;	jobsSpecialExpiryDate[add] = 3
